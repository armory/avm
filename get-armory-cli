#! /usr/bin/env bash

throw_error_message() {
   echo "#############################################################################################################"
   echo "#                           There was a problem trying to download/install avm, and armory"
   echo "#"
   echo "# $1"
   echo "#"
   echo "# You can keep installing it manually - https://docs.armory.io/cd-as-a-service/setup/cli/#local-installation"
   echo "#############################################################################################################"
   exit 1
}

RAW_ARCH=$(uname -m)
OS=
case $(uname) in
  'Linux')
    OS='linux'
    ;;
  'Darwin')
    OS='darwin'
    ;;
  *)
    echo "un-supported OS detected: ${OS}-${RAW_ARCH}, exiting..."
    exit 1
    ;;
esac

ARCH=""
case $RAW_ARCH in
    x86_64) ARCH="amd64" ;;
    arm64)  ARCH="arm64" ;;
    *)
      echo "un-supported os/arch detected: ${OS}-${RAW_ARCH}, exiting..."
      exit 1
      ;;
esac

# Sanity checks

echo "Looking for dependencies..."
if ! command -v curl > /dev/null; then
	echo "######################################################################################################"
	echo "# curl not found."
	echo "#"
	echo "# Please install curl on your system using your favourite package manager."
	echo "######################################################################################################"
	exit 1
fi

status_code=$(curl --write-out %{http_code} --silent --output /dev/null https://api.github.com/repos/armory/avm/releases/latest)
if [[ "$status_code" -eq 403 ]] ; then
    throw_error_message "GitHub API rate limit exceeded - Check out GitHub documentation for more details."
fi

echo "Detected ${OS}-${ARCH}, preparing to install Armory Version Manager and Armory CLI"

DOWNLOAD_URL=$(curl -L -s https://api.github.com/repos/armory/avm/releases/latest | grep "browser_download_url.*avm-${OS}-${ARCH}" | cut -d : -f 2,3 | tr -d \" | xargs echo -n)
DEST_DIR="${HOME}/.avm/bin"
mkdir -p "$DEST_DIR"
DEST="${DEST_DIR}/avm"
echo "saving '${DOWNLOAD_URL}' to ${DEST}"
curl -sL "${DOWNLOAD_URL}" --output "${DEST}"

if [ ! -f "$DEST" ]; then
	throw_error_message "Binary file do not downloaded."
fi

chmod +x "${DEST}"

export PATH="${PATH}:${DEST_DIR}"

if ! command -v avm > /dev/null; then
	throw_error_message "avm was not installed correctly, there was an issue trying to add it to the path"
fi

echo "Installing latest Armory CLI with AVM, to upgrade in the future use 'avm'"
avm install

###
# Logic below for updating profiles are inspired by Nvm and SDKMan
##
PATH_SNIPPIT="\n# This adds the Armory Version Manager (AVM) and Armory CLI to the path\nexport PATH=\"\${PATH}:${HOME}/.avm/bin\""
avm_bash_profile="${HOME}/.bash_profile"
avm_bashrc="${HOME}/.bashrc"
avm_zshrc="${ZDOTDIR:-${HOME}}/.zshrc"
if [[ $OS == 'darwin' ]]; then
  touch "$avm_bash_profile"
  echo "Attempt update of login bash profile on OSX..."
  if [[ -z $(grep "export PATH=\"\${PATH}:${HOME}/.avm/bin" "$avm_bash_profile") ]]; then
    echo -e "$PATH_SNIPPIT" >> "$avm_bash_profile"
    echo "Added ${HOME}/.avm/bin to path in $avm_bash_profile"
  fi
else
  echo "Attempt update of interactive bash profile on regular UNIX..."
  touch "${avm_bashrc}"
  if [[ -z $(grep "export PATH=\"\${PATH}:${HOME}/.avm/bin" "$avm_bashrc") ]]; then
      echo -e "$PATH_SNIPPIT" >> "$avm_bashrc"
      echo "Added ${HOME}/.avm/bin to path in $avm_bashrc"
  fi
fi

echo "Attempt update of zsh profile..."
touch "$avm_zshrc"
if [[ -z $(grep "export PATH=\"\${PATH}:${HOME}/.avm/bin" "$avm_zshrc") ]]; then
    echo -e "$PATH_SNIPPIT" >> "$avm_zshrc"
    echo "Added ${HOME}/.avm/bin to path in ${avm_zshrc}"
fi

echo "############################################################################################"
echo "#                          Install of avm, and armory complete"
echo "# This install script updates your bash or zsh profile to add ${HOME}/.avm/bin to your path"
echo "# If you aren't using bash or zsh you will need to do this manually"
echo "# You may have to start a new terminal session or re-source your bash or zsh profile/rc"
echo "############################################################################################"